name: YouTube Auto Visit

on:
  schedule:
    - cron: '*/10 * * * *'  # Run every 10 minutes
  workflow_dispatch:
    inputs:
      video_url:
        description: 'YouTube Video URL'
        required: true
        default: 'https://www.youtube.com/watch?v=fuMMSpbPPQs&list=PLaHqwgkhNP9GzvPkj7maeLszT4Xp7F58F'

jobs:
  visit-youtube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          echo "Initializing npm project..."
          npm init -y
          echo "Installing Puppeteer, Axios and dependencies..."
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs debug axios

      - name: Create Puppeteer script
        run: |
          mkdir -p scripts screenshots
          cat > scripts/youtube-visit.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const axios = require('axios');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          // Helper sleep function to wait for a specified time (in ms)
          function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
          }

          // Fetch proxies from two sources and merge them.
          async function getProxies() {
              let proxies = [];
              try {
                  console.log("Fetching proxies from proxy-list.download...");
                  const response1 = await axios.get('https://www.proxy-list.download/api/v1/get?type=http');
                  const list1 = response1.data.split("\r\n").map(p => p.trim()).filter(Boolean);
                  console.log(`proxy-list.download returned ${list1.length} proxies.`);
                  proxies.push(...list1);
              } catch (error) {
                  console.error("Failed to fetch proxies from proxy-list.download:", error.message);
              }
              try {
                  console.log("Fetching proxies from TheSpeedX/PROXY-List...");
                  const response2 = await axios.get('https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt');
                  const list2 = response2.data.split("\n").map(p => p.trim()).filter(Boolean);
                  console.log(`TheSpeedX proxy list returned ${list2.length} proxies.`);
                  proxies.push(...list2);
              } catch (error) {
                  console.error("Failed to fetch proxies from TheSpeedX/PROXY-List:", error.message);
              }
              const uniqueProxies = [...new Set(proxies)];
              console.log(`Total unique proxies fetched: ${uniqueProxies.length}`);
              return uniqueProxies;
          }

          // Helper function to safely take a screenshot
          async function safeScreenshot(page, path) {
              try {
                  await page.screenshot({ path });
                  console.log(`Screenshot taken: ${path}`);
              } catch (err) {
                  console.error(`Failed to take screenshot ${path}: ${err.message}`);
              }
          }

          async function visitYouTube(videoUrl) {
              const proxies = await getProxies();
              if (proxies.length === 0) {
                  console.warn("No proxies available. Exiting...");
                  return;
              }

              // Loop through 3 iterations, using a random proxy each time.
              for (let i = 0; i < 3; i++) {
                  const proxy = proxies[Math.floor(Math.random() * proxies.length)];
                  console.log(`Loop ${i + 1}: Using proxy: ${proxy}`);

                  console.log('Launching browser with proxy...');
                  const browser = await puppeteer.launch({
                      headless: "new",
                      executablePath: require('puppeteer').executablePath(),
                      args: [
                          `--proxy-server=http://${proxy}`,
                          '--no-sandbox',
                          '--disable-setuid-sandbox',
                          '--disable-dev-shm-usage',
                          '--disable-gpu'
                      ]
                  });
                  const page = await browser.newPage();

                  // Log page-level errors
                  page.on('error', error => console.error('Page error:', error));
                  page.on('pageerror', error => console.error('Page error:', error));

                  try {
                      // Retry navigation up to 3 times if it times out
                      const maxRetries = 3;
                      let navigated = false;
                      for (let attempt = 1; attempt <= maxRetries; attempt++) {
                          try {
                              console.log(`Loop ${i + 1}: Attempt ${attempt} to visit ${videoUrl}`);
                              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 60000 });
                              navigated = true;
                              break;
                          } catch (navError) {
                              console.error(`Loop ${i + 1}: Attempt ${attempt} failed: ${navError.message}`);
                              if (attempt < maxRetries) {
                                  console.log(`Retrying in 5 seconds...`);
                                  await sleep(5000);
                              } else {
                                  throw navError;
                              }
                          }
                      }
                      if (!navigated) {
                          throw new Error("Navigation failed after maximum retries.");
                      }

                      await safeScreenshot(page, `./screenshots/youtube_loaded_${Date.now()}.png`);

                      console.log('Checking if video is already playing...');
                      const isPlaying = await page.evaluate(() => {
                          const video = document.querySelector('video');
                          return video && !video.paused;
                      });

                      if (!isPlaying) {
                          console.log('Video is not playing. Attempting to click Play button...');
                          const playButtonSelectors = [
                              'button[aria-label="Play"]',
                              'button[title="Play (k)"]',
                              '.ytp-play-button'
                          ];
                          let playButton = null;
                          for (const selector of playButtonSelectors) {
                              playButton = await page.$(selector);
                              if (playButton) {
                                  console.log(`Play button found using selector: ${selector}`);
                                  await playButton.click();
                                  console.log('Video started playing.');
                                  await safeScreenshot(page, `./screenshots/youtube_play_clicked_${Date.now()}.png`);
                                  break;
                              }
                          }
                          if (!playButton) {
                              console.warn('Play button not found, skipping play action.');
                          }
                      } else {
                          console.log('Video is already playing. Skipping Play button click.');
                      }

                      // Take periodic screenshots every 5 seconds while watching for a total of 31 seconds
                      console.log('Watching for 31 seconds with periodic screenshots...');
                      for (let t = 5; t <= 31; t += 5) {
                          await sleep(5000);
                          await safeScreenshot(page, `./screenshots/youtube_watch_${t}s_${Date.now()}.png`);
                      }

                      await safeScreenshot(page, `./screenshots/youtube_finished_${Date.now()}.png`);

                  } catch (error) {
                      console.error('Error during page interaction:', error.message);
                      try {
                          fs.writeFileSync('./screenshots/failure_page_content.html', await page.content());
                      } catch (e) {
                          console.error('Failed to save failure page content:', e.message);
                      }
                      await safeScreenshot(page, './screenshots/failure_screenshot.png');
                  } finally {
                      console.log('Closing browser...');
                      await browser.close();
                  }
              }
          }

          async function run() {
              const videoUrl = process.argv[2] || 'https://www.youtube.com/watch?v=fuMMSpbPPQs&list=PLaHqwgkhNP9GzvPkj7maeLszT4Xp7F58F';
              await visitYouTube(videoUrl);
          }

          run().catch(error => {
              console.error('Script failed:', error.message);
          });
          EOL

      - name: Run Puppeteer script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://www.youtube.com/watch?v=fuMMSpbPPQs&list=PLaHqwgkhNP9GzvPkj7maeLszT4Xp7F58F' }}"
          echo "Visiting: $VIDEO_URL"
          node scripts/youtube-visit.js "$VIDEO_URL" | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: youtube-debug-artifacts
          path: |
            screenshots/
            *.log
            failure_page_content.html
            failure_screenshot.png
          retention-days: 7
