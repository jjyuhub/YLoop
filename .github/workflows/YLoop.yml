name: YouTube Auto Visit

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:
    inputs:
      video_url:
        description: 'YouTube Video URL'
        required: true
        default: 'https://www.youtube.com/watch?v=Km-HyBwxcR8'

jobs:
  visit-youtube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs debug

      - name: Create Puppeteer script
        run: |
          mkdir -p scripts screenshots
          cat > scripts/youtube-visit.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          // Helper sleep function.
          function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
          }

          // Function to click cookie consent if present.
          async function acceptCookies(page) {
              try {
                  const buttonHandle = await page.evaluateHandle(() => {
                      const buttons = Array.from(document.querySelectorAll('button'));
                      return buttons.find(btn => /agree|accept/i.test(btn.innerText));
                  });
                  if (buttonHandle) {
                      console.log("Cookie consent prompt found. Clicking...");
                      await page.evaluate(() => {
                          const btn = Array.from(document.querySelectorAll('button'))
                              .find(btn => /agree|accept/i.test(btn.innerText));
                          if (btn) btn.click();
                      });
                      await sleep(2000);
                      await safeScreenshot(page, `./screenshots/youtube_cookies_accepted_${Date.now()}.png`);
                  } else {
                      console.log("No cookie consent prompt found.");
                  }
              } catch (e) {
                  console.error("Error while accepting cookies:", e.message);
              }
          }

          // Use the provided static proxy list.
          async function getProxies() {
          const staticProxies = [
              "45.123.142.100:8181",
              "15.206.25.41:3128",
              "20.27.86.185:8080",
              "46.161.194.134:3128",
              "103.144.147.18:8080",
              "27.147.175.115:8080",
              "103.156.161.193:8080",
              "65.1.244.232:80",
              "103.214.9.97:3128",
              "3.10.93.50:1080",
              "91.132.132.188:3128",
              "187.19.200.217:8090",
              "157.100.56.47:999",
              "72.10.164.178:32183",
              "190.12.95.170:47029",
              "202.148.15.90:8080",
              "103.165.157.248:8090",
              "103.133.61.165:1111",
              "38.22.17.50:3128",
              "103.169.254.11:6080",
              "181.215.253.112:5001",
              "23.122.184.9:8888",
              "46.55.143.145:8080",
              "41.65.236.47:1981",
              "177.19.167.242:80",
              "130.36.36.29:443",
              "188.132.221.22:8080",
              "67.43.236.21:4673",
              "103.163.103.64:8080",
              "103.154.77.48:89",
              "191.52.236.39:8080",
              "27.79.236.80:16000",
              "85.62.10.87:8080",
              "188.132.222.15:8080",
              "103.48.71.142:83",
              "45.5.116.144:999",
              "203.161.30.138:8070",
              "186.26.92.180:58339",
              "45.238.112.229:56789",
              "188.132.150.77:8080",
              "103.80.110.190:8080",
              "24.144.94.90:8080",
              "187.86.159.54:3128",
              "103.169.255.203:6080",
              "8.243.163.126:3128",
              "103.132.54.150:8080",
              "45.191.4.253:8080",
              "49.49.60.206:8080",
              "208.87.243.199:7878",
              "67.43.227.226:24837",
              "45.124.170.5:8080",
              "45.140.143.77:18080",
              "203.74.125.18:8888",
              "31.145.149.75:9090",
              "142.93.211.107:3128",
              "67.43.228.250:33235",
              "160.20.55.235:8080",
              "103.67.84.146:8080",
              "177.234.226.83:1994",
              "44.215.100.135:8118",
              "117.103.68.38:9941",
              "103.189.116.133:8080"
          ];
              console.log(`Using static proxy list with ${staticProxies.length} proxies.`);
              return staticProxies;
          }

          // Enhanced test for a single proxy: attempt to load YouTube homepage and check title.
          async function testProxy(proxy) {
              let browser;
              try {
                  console.log(`Testing proxy ${proxy}...`);
                  const startTime = Date.now();
                  browser = await puppeteer.launch({
                      headless: "new",
                      ignoreHTTPSErrors: true,
                      executablePath: require('puppeteer').executablePath(),
                      args: [
                          `--proxy-server=http://${proxy}`,
                          '--ignore-certificate-errors',
                          '--no-sandbox',
                          '--disable-setuid-sandbox',
                          '--disable-dev-shm-usage',
                          '--disable-gpu'
                      ]
                  });
                  const page = await browser.newPage();
                  // Use a 60-second timeout for slower proxies.
                  await page.goto('https://www.youtube.com', { waitUntil: 'networkidle2', timeout: 120000 });
                  const title = await page.title();
                  const responseTime = Date.now() - startTime;
                  if (!title || !title.includes("YouTube")) {
                      throw new Error(`Page title check failed. Got: ${title}`);
                  }
                  console.log(`Proxy ${proxy} is valid. Response time: ${responseTime}ms`);
                  await browser.close();
                  return true;
              } catch (e) {
                  console.error(`Proxy ${proxy} is invalid: ${e.message}`);
                  if (browser) {
                      try { await browser.close(); } catch (err) {}
                  }
                  return false;
              }
          }

          // Rapidly test proxies concurrently.
          async function validateProxies(proxies, concurrency = 50) {
              const validProxies = [];
              let index = 0;
              async function worker() {
                  while (index < proxies.length) {
                      const currentIndex = index++;
                      const proxy = proxies[currentIndex];
                      if (await testProxy(proxy)) {
                          validProxies.push(proxy);
                      }
                  }
              }
              const workers = [];
              for (let i = 0; i < concurrency; i++) {
                  workers.push(worker());
              }
              await Promise.all(workers);
              console.log(`Total valid proxies found: ${validProxies.length}`);
              return validProxies;
          }

          // Helper function to safely take a screenshot.
          async function safeScreenshot(page, path) {
              try {
                  await page.screenshot({ path });
                  console.log(`Screenshot taken: ${path}`);
              } catch (err) {
                  console.error(`Failed to take screenshot ${path}: ${err.message}`);
              }
          }

          async function visitYouTube(videoUrl) {
              const allProxies = await getProxies();
              if (allProxies.length === 0) {
                  console.warn("No proxies available. Exiting...");
                  return;
              }
              const validProxies = await validateProxies(allProxies, 50);
              if (validProxies.length === 0) {
                  console.warn("No valid proxies found. Exiting...");
                  return;
              }

              // For 3 iterations, pick a random validated proxy.
              for (let i = 0; i < 3; i++) {
                  const proxy = validProxies[Math.floor(Math.random() * validProxies.length)];
                  console.log(`Loop ${i + 1}: Using proxy: ${proxy}`);

                  console.log('Launching browser with proxy...');
                  const browser = await puppeteer.launch({
                      headless: "new",
                      ignoreHTTPSErrors: true,
                      executablePath: require('puppeteer').executablePath(),
                      args: [
                          `--proxy-server=http://${proxy}`,
                          '--ignore-certificate-errors',
                          '--no-sandbox',
                          '--disable-setuid-sandbox',
                          '--disable-dev-shm-usage',
                          '--disable-gpu'
                      ]
                  });
                  const page = await browser.newPage();

                  page.on('error', error => console.error('Page error:', error));
                  page.on('pageerror', error => console.error('Page error:', error));

                  try {
                      // Retry navigation up to 3 times.
                      const maxRetries = 3;
                      let navigated = false;
                      for (let attempt = 1; attempt <= maxRetries; attempt++) {
                          try {
                              console.log(`Loop ${i + 1}: Attempt ${attempt} to visit ${videoUrl}`);
                              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 320000 });
                              navigated = true;
                              break;
                          } catch (navError) {
                              console.error(`Loop ${i + 1}: Attempt ${attempt} failed: ${navError.message}`);
                              if (attempt < maxRetries) {
                                  console.log("Retrying in 5 seconds...");
                                  await sleep(5000);
                              } else {
                                  throw navError;
                              }
                          }
                      }
                      if (!navigated) {
                          throw new Error("Navigation failed after maximum retries.");
                      }

                      await safeScreenshot(page, `./screenshots/youtube_loaded_${Date.now()}.png`);

                      // Accept YouTube cookie prompt if it appears.
                      await acceptCookies(page);

                      console.log("Checking if video is already playing...");
                      const isPlaying = await page.evaluate(() => {
                          const video = document.querySelector("video");
                          return video && !video.paused;
                      });

                      if (!isPlaying) {
                          console.log("Video is not playing. Attempting to click Play button...");
                          const playButtonSelectors = [
                              'button[aria-label="Play"]',
                              'button[title="Play (k)"]',
                              '.ytp-play-button'
                          ];
                          let playButton = null;
                          for (const selector of playButtonSelectors) {
                              playButton = await page.$(selector);
                              if (playButton) {
                                  console.log(`Play button found using selector: ${selector}`);
                                  await playButton.click();
                                  console.log("Video started playing.");
                                  await safeScreenshot(page, `./screenshots/youtube_play_clicked_${Date.now()}.png`);
                                  break;
                              }
                          }
                          if (!playButton) {
                              console.warn("Play button not found, skipping play action.");
                          }
                      } else {
                          console.log("Video is already playing. Skipping Play button click.");
                      }

                      console.log("Watching for 410 seconds with periodic screenshots...");
                      for (let t = 5; t <= 410; t += 5) {
                          await sleep(5000);
                          await safeScreenshot(page, `./screenshots/youtube_watch_${t}s_${Date.now()}.png`);
                      }

                      await safeScreenshot(page, `./screenshots/youtube_finished_${Date.now()}.png`);

                      // Save the final HTML page.
                      const finalHtml = await page.content();
                      const htmlFile = `./screenshots/final_page_${Date.now()}.html`;
                      fs.writeFileSync(htmlFile, finalHtml);
                      console.log(`Final HTML page saved: ${htmlFile}`);

                  } catch (error) {
                      console.error("Error during page interaction:", error.message);
                      try {
                          fs.writeFileSync("./screenshots/failure_page_content.html", await page.content());
                      } catch (e) {
                          console.error("Failed to save failure page content:", e.message);
                      }
                      await safeScreenshot(page, "./screenshots/failure_screenshot.png");
                  } finally {
                      console.log("Closing browser...");
                      await browser.close();
                  }
              }
          }

          async function run() {
              const videoUrl = process.argv[2] || "https://www.youtube.com/watch?v=Km-HyBwxcR8";
              await visitYouTube(videoUrl);
          }

          run().catch(error => {
              console.error("Script failed:", error.message);
          });
          EOL

      - name: Run Puppeteer script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://www.youtube.com/watch?v=Km-HyBwxcR8' }}"
          echo "Visiting: $VIDEO_URL"
          node scripts/youtube-visit.js "$VIDEO_URL" | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: youtube-debug-artifacts
          path: |
            screenshots/
            *.log
            failure_page_content.html
            failure_screenshot.png
          retention-days: 7
