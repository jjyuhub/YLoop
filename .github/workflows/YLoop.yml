name: YouTube Auto Visit

on:
  schedule:
    - cron: '*/15 * * * *'  # Run every 15 minutes
  workflow_dispatch:
    inputs:
      video_url:
        description: 'YouTube Video URL'
        required: true
        default: 'https://www.youtube.com/watch?v=Km-HyBwxcR8'

jobs:
  visit-youtube:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm init -y
          npm install puppeteer puppeteer-core puppeteer-extra puppeteer-extra-plugin-stealth fs

      - name: Create Puppeteer script
        run: |
          mkdir -p scripts screenshots
          cat > scripts/youtube-visit.js << 'EOL'
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          // Use stealth plugin to avoid bot detection.
          puppeteer.use(StealthPlugin());

          // Helper sleep function.
          function sleep(ms) {
              return new Promise(resolve => setTimeout(resolve, ms));
          }

          // Helper to safely take a screenshot.
          async function safeScreenshot(page, path) {
              try {
                  await page.screenshot({ path });
                  console.log(`Screenshot taken: ${path}`);
              } catch (err) {
                  console.error(`Failed to take screenshot ${path}: ${err.message}`);
              }
          }

          // Accept cookie consent if present.
          async function acceptCookies(page) {
              try {
                  const buttonHandle = await page.evaluateHandle(() => {
                      const buttons = Array.from(document.querySelectorAll('button'));
                      return buttons.find(btn => /agree|accept/i.test(btn.innerText));
                  });
                  if (buttonHandle) {
                      console.log("Cookie consent prompt found. Clicking...");
                      await page.evaluate(() => {
                          const btn = Array.from(document.querySelectorAll('button'))
                              .find(btn => /agree|accept/i.test(btn.innerText));
                          if (btn) btn.click();
                      });
                      await sleep(2000);
                      await safeScreenshot(page, `./screenshots/youtube_cookies_accepted_${Date.now()}.png`);
                  } else {
                      console.log("No cookie consent prompt found.");
                  }
              } catch (e) {
                  console.error("Error while accepting cookies:", e.message);
              }
          }

          // ----------------------- Proxy Fetch & Validation -----------------------

          // Fetch proxies from multiple sources.
          async function fetchProxies() {
              const sources = [
                  "https://www.proxy-list.download/api/v1/get?type=https",
                  "https://raw.githubusercontent.com/TheSpeedX/PROXY-List/master/http.txt",
                  "https://api.proxyscrape.com/?request=displayproxies&proxytype=https",
                  "https://raw.githubusercontent.com/ShiftyTR/Proxy-List/master/proxy.txt"
              ];
              let allProxies = [];
              for (const url of sources) {
                  try {
                      const res = await fetch(url, { timeout: 10000 });
                      const text = await res.text();
                      const proxies = text.split("\n").map(p => p.trim()).filter(p => p);
                      console.log(`Fetched ${proxies.length} proxies from ${url}`);
                      allProxies = allProxies.concat(proxies);
                  } catch (e) {
                      console.error(`Error fetching proxies from ${url}: ${e.message}`);
                  }
              }
              // Remove duplicates.
              const uniqueProxies = [...new Set(allProxies)];
              console.log(`Total unique proxies fetched: ${uniqueProxies.length}`);
              return uniqueProxies;
          }

          // A simple concurrency runner.
          async function runWithConcurrency(tasks, concurrency) {
              let index = 0;
              const results = [];
              async function worker() {
                  while (index < tasks.length) {
                      const current = tasks[index++];
                      results.push(await current());
                  }
              }
              const workers = [];
              for (let i = 0; i < concurrency; i++) {
                  workers.push(worker());
              }
              await Promise.all(workers);
              return results;
          }

          // Test a single proxy by launching a browser and verifying the YouTube homepage title.
          async function testProxy(proxy) {
              let browser;
              try {
                  console.log(`Testing proxy ${proxy}...`);
                  const startTime = Date.now();
                  browser = await puppeteer.launch({
                      headless: "new",
                      ignoreHTTPSErrors: true,
                      executablePath: require('puppeteer').executablePath(),
                      args: [
                          `--proxy-server=http://${proxy}`,
                          '--ignore-certificate-errors',
                          '--no-sandbox',
                          '--disable-setuid-sandbox',
                          '--disable-dev-shm-usage',
                          '--disable-gpu'
                      ]
                  });
                  const page = await browser.newPage();
                  await page.goto('https://www.youtube.com', { waitUntil: 'networkidle2', timeout: 120000 });
                  const title = await page.title();
                  const responseTime = Date.now() - startTime;
                  if (!title || !title.includes("YouTube")) {
                      throw new Error(`Page title check failed. Got: ${title}`);
                  }
                  console.log(`Proxy ${proxy} is valid. Response time: ${responseTime}ms`);
                  await browser.close();
                  return true;
              } catch (e) {
                  console.error(`Proxy ${proxy} is invalid: ${e.message}`);
                  if (browser) {
                      try { await browser.close(); } catch (err) {}
                  }
                  return false;
              }
          }

          // Verify a proxy by running 10 consecutive tests.
          async function verifyReliableProxy(proxy) {
              const RELIABILITY_CHECKS = 10;
              for (let i = 0; i < RELIABILITY_CHECKS; i++) {
                  const result = await testProxy(proxy);
                  if (!result) {
                      console.log(`Proxy ${proxy} failed reliability check ${i + 1}/${RELIABILITY_CHECKS}`);
                      return false;
                  }
              }
              console.log(`Proxy ${proxy} passed ${RELIABILITY_CHECKS} reliability tests.`);
              return true;
          }

          // Validate proxies: first an initial test, then verify reliability.
          async function validateProxies(concurrency = 50) {
              const allProxies = await fetchProxies();
              if (allProxies.length === 0) {
                  console.warn("No proxies fetched. Exiting proxy validation.");
                  return [];
              }

              console.log("Starting initial proxy tests...");
              const initialTasks = allProxies.map(proxy => async () => {
                  return (await testProxy(proxy)) ? proxy : null;
              });
              const initialResults = await runWithConcurrency(initialTasks, concurrency);
              const validProxies = initialResults.filter(p => p);
              console.log(`Proxies passing initial test: ${validProxies.length}`);

              if (validProxies.length === 0) {
                  console.warn("No proxies passed the initial test. Exiting.");
                  return [];
              }

              console.log("Starting reliability tests (10 tests per proxy)...");
              const reliableTasks = validProxies.map(proxy => async () => {
                  return (await verifyReliableProxy(proxy)) ? proxy : null;
              });
              const reliableResults = await runWithConcurrency(reliableTasks, concurrency);
              const reliableProxies = reliableResults.filter(p => p);
              console.log(`Total reliable proxies found: ${reliableProxies.length}`);
              return reliableProxies;
          }

          // ----------------------- YouTube Visit Logic -----------------------

          async function visitYouTube(videoUrl) {
              const reliableProxies = await validateProxies(50);
              if (reliableProxies.length === 0) {
                  console.warn("No reliable proxies found. Exiting...");
                  return;
              }

              // For 3 iterations, pick a random reliable proxy.
              for (let i = 0; i < 3; i++) {
                  const proxy = reliableProxies[Math.floor(Math.random() * reliableProxies.length)];
                  console.log(`Loop ${i + 1}: Using proxy: ${proxy}`);

                  console.log('Launching browser with proxy...');
                  const browser = await puppeteer.launch({
                      headless: "new",
                      ignoreHTTPSErrors: true,
                      executablePath: require('puppeteer').executablePath(),
                      args: [
                          `--proxy-server=http://${proxy}`,
                          '--ignore-certificate-errors',
                          '--no-sandbox',
                          '--disable-setuid-sandbox',
                          '--disable-dev-shm-usage',
                          '--disable-gpu'
                      ]
                  });
                  const page = await browser.newPage();

                  // Flag to indicate if we need to switch proxy immediately.
                  let shouldSwitch = false;

                  // Listen for page errors and set the flag if the specific error is detected.
                  page.on('pageerror', error => {
                      console.error('Page error:', error);
                      if (error.message.includes("solveSimpleChallenge is not defined")) {
                          console.log("Encountered solveSimpleChallenge error. Switching proxy immediately.");
                          shouldSwitch = true;
                      }
                  });

                  try {
                      // Retry navigation up to 3 times.
                      const maxRetries = 3;
                      let navigated = false;
                      for (let attempt = 1; attempt <= maxRetries; attempt++) {
                          try {
                              console.log(`Loop ${i + 1}: Attempt ${attempt} to visit ${videoUrl}`);
                              await page.goto(videoUrl, { waitUntil: 'networkidle2', timeout: 320000 });
                              if (shouldSwitch) {
                                  throw new Error("Switching proxy due to solveSimpleChallenge error");
                              }
                              navigated = true;
                              break;
                          } catch (navError) {
                              console.error(`Loop ${i + 1}: Attempt ${attempt} failed: ${navError.message}`);
                              if (attempt < maxRetries) {
                                  console.log("Retrying in 5 seconds...");
                                  await sleep(5000);
                              } else {
                                  throw navError;
                              }
                          }
                      }
                      if (!navigated) {
                          throw new Error("Navigation failed after maximum retries.");
                      }

                      await safeScreenshot(page, `./screenshots/youtube_loaded_${Date.now()}.png`);

                      // Accept YouTube cookie prompt if it appears.
                      await acceptCookies(page);
                      if (shouldSwitch) {
                          throw new Error("Switching proxy due to solveSimpleChallenge error");
                      }

                      console.log("Checking if video is already playing...");
                      const isPlaying = await page.evaluate(() => {
                          const video = document.querySelector("video");
                          return video && !video.paused;
                      });

                      if (!isPlaying) {
                          console.log("Video is not playing. Attempting to click Play button...");
                          const playButtonSelectors = [
                              'button[aria-label="Play"]',
                              'button[title="Play (k)"]',
                              '.ytp-play-button'
                          ];
                          let playButton = null;
                          for (const selector of playButtonSelectors) {
                              playButton = await page.$(selector);
                              if (playButton) {
                                  console.log(`Play button found using selector: ${selector}`);
                                  await playButton.click();
                                  console.log("Video started playing.");
                                  await safeScreenshot(page, `./screenshots/youtube_play_clicked_${Date.now()}.png`);
                                  break;
                              }
                          }
                          if (!playButton) {
                              console.warn("Play button not found, skipping play action.");
                          }
                      } else {
                          console.log("Video is already playing. Skipping Play button click.");
                      }
                      if (shouldSwitch) {
                          throw new Error("Switching proxy due to solveSimpleChallenge error");
                      }

                      console.log("Watching for 410 seconds with periodic screenshots...");
                      for (let t = 5; t <= 410; t += 5) {
                          if (shouldSwitch) {
                              console.log("Switching proxy due to solveSimpleChallenge error during watch loop.");
                              throw new Error("Switching proxy due to solveSimpleChallenge error");
                          }
                          await sleep(5000);
                          await safeScreenshot(page, `./screenshots/youtube_watch_${t}s_${Date.now()}.png`);
                      }

                      await safeScreenshot(page, `./screenshots/youtube_finished_${Date.now()}.png`);

                      // Save the final HTML page.
                      const finalHtml = await page.content();
                      const htmlFile = `./screenshots/final_page_${Date.now()}.html`;
                      fs.writeFileSync(htmlFile, finalHtml);
                      console.log(`Final HTML page saved: ${htmlFile}`);

                  } catch (error) {
                      console.error("Error during page interaction:", error.message);
                      try {
                          fs.writeFileSync("./screenshots/failure_page_content.html", await page.content());
                      } catch (e) {
                          console.error("Failed to save failure page content:", e.message);
                      }
                      await safeScreenshot(page, "./screenshots/failure_screenshot.png");
                  } finally {
                      console.log("Closing browser...");
                      await browser.close();
                  }
              }
          }

          async function run() {
              const videoUrl = process.argv[2] || "https://www.youtube.com/watch?v=Km-HyBwxcR8";
              await visitYouTube(videoUrl);
          }

          run().catch(error => {
              console.error("Script failed:", error.message);
          });
          EOL

      - name: Run Puppeteer script
        run: |
          VIDEO_URL="${{ github.event.inputs.video_url || 'https://www.youtube.com/watch?v=Km-HyBwxcR8' }}"
          echo "Visiting: $VIDEO_URL"
          node scripts/youtube-visit.js "$VIDEO_URL" | tee script_output.log

      - name: Upload debug artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: youtube-debug-artifacts
          path: |
            screenshots/
            *.log
            failure_page_content.html
            failure_screenshot.png
          retention-days: 7
